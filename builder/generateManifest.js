import fs from 'fs';
import path from 'path';

const CLIENT_ROOT = path.resolve('client');
const MANIFEST_OUT = path.join(CLIENT_ROOT, '@core/route-manifest.ts');

const ROUTE_SOURCES = [
  { dir: path.join(CLIENT_ROOT, '@pages'), basePath: '/' },
  { dir: path.join(CLIENT_ROOT, '@admin'), basePath: '/admin' },
];

const isPageFile = file => /^page\.(tsx|ts)$/.test(file);
const isLayoutFile = file => /^layout\.(tsx|ts)$/.test(file);

function toRoutePath(base, segments) {
  const pathPart = segments
    .map(segment => {
      if (segment.startsWith('[') && segment.endsWith(']')) {
        return ':' + segment.slice(1, -1);
      }
      return segment === 'index' ? '' : segment;
    })
    .filter(Boolean)
    .join('/');
  return path.join(base, pathPart).replace(/\\/g, '/');
}

function relativeImportPath(from, to) {
  let rel = path.relative(path.dirname(from), to).replace(/\\/g, '/');
  if (!rel.startsWith('.')) rel = './' + rel;
  return rel.replace(/\.(tsx|ts)$/, '');
}

function scanDir(dir, segments = [], basePath) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });

  const node = {
    path: toRoutePath(basePath, segments),
  };

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    const relImport = relativeImportPath(MANIFEST_OUT, fullPath);

    if (entry.isFile()) {
      if (isPageFile(entry.name)) node.pagePath = relImport;
      if (isLayoutFile(entry.name)) node.layoutPath = relImport;
    } else if (entry.isDirectory()) {
      const children = scanDir(fullPath, [...segments, entry.name], basePath);
      if (!node.children) node.children = [];
      node.children.push(...children);
    }
  }

  return node.pagePath || node.layoutPath ? [node] : node.children ?? [];
}

export default function generateManifest() {
  const allTrees = [];
  const moduleMap = {};

  for (const { dir, basePath } of ROUTE_SOURCES) {
    const tree = scanDir(dir, [], basePath);
    allTrees.push(...tree);
  }
  allTrees.push({path: "*", pagePath: "../404.tsx"});

  const flatten = (nodes) => {
    for (const node of nodes) {
      if (node.pagePath) {
        moduleMap[node.path] = `() => import("${node.pagePath}")`;
      }
      if (node.layoutPath) {
        moduleMap[node.path + '@layout'] = `() => import("${node.layoutPath}")`;
      }
      if (node.children) flatten(node.children);
    }
  };

  flatten(allTrees);

  const content = `// Auto-generated by generateManifest
// DO NOT EDIT MANUALLY

export const routeTree = ${JSON.stringify(allTrees, null, 2)};

export const moduleMap = {
${Object.entries(moduleMap).map(([k, v]) => `  "${k}": ${v},`).join('\n')}
};
`;

  fs.writeFileSync(MANIFEST_OUT, content.trimStart(), 'utf-8');
  console.log('Route manifest generated');
}

generateManifest();
